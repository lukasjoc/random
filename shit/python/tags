!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ENGINE	plotly_test.py	/^ENGINE = create_engine(URL, fast_executemany=True)$/;"	v
HolyIter	iterator.py	/^class HolyIter:$/;"	c
Nominatim	find_country/city.py	/^from geopy.geocoders import Nominatim$/;"	i
Nominatim	find_country/geo.py	/^from geopy.geocoders import Nominatim$/;"	i
Nominatim	find_country/plz.py	/^from geopy.geocoders import Nominatim$/;"	i
T	fib_generator.py	/^import typing as T$/;"	i
T	generator.py	/^import typing as T$/;"	i
__init__	iterator.py	/^    def __init__(self):$/;"	m	class:HolyIter
__iter__	iterator.py	/^    def __iter__(self):$/;"	m	class:HolyIter	file:
__next__	iterator.py	/^    def __next__(self):$/;"	m	class:HolyIter	file:
aggr_df	plotly_test.py	/^aggr_df= pd.read_sql_table("kpi_aggregated", ENGINE)$/;"	v
ap	http_client.py	/^import argparse as ap$/;"	i
argparse	duplicate_order.py	/^    import argparse$/;"	i
argparse	today.py	/^import argparse$/;"	i
args	duplicate_order.py	/^    args = parser.parse_args()$/;"	v
args	http_client.py	/^    args = parser.parse_args()$/;"	v
args_test	args.py	/^def args_test(arg, *argv, **kwargs):$/;"	f
c_indent	pp_tree.py	/^def c_indent(indent):$/;"	f
client	http_client.py	/^import http.client$/;"	i
codecs	corona/sum_died.py	/^import codecs$/;"	i
complex_types	test.py	/^complex_types = dict, list, tuple$/;"	v
countingSort	csort.py	/^def countingSort(array):$/;"	f
create_engine	plotly_test.py	/^from sqlalchemy import create_engine$/;"	i
create_tree	pp_tree.py	/^def create_tree(obj):$/;"	f
csv	find_country/plz.py	/^    import csv$/;"	i
died	corona/sum_died.py	/^    died = 0.0$/;"	v
digital_root	sum_of_digits.py	/^def digital_root(n):$/;"	f
dirReduc	str_pair.py	/^def dirReduc(arr: list) -> list:$/;"	f
divisorGenerator	get_divisors.py	/^def divisorGenerator(n):$/;"	f
duckGen	generator.py	/^def duckGen(amount: int) -> T.Coroutine:$/;"	f
duplicate_encode	duplicate_order.py	/^def duplicate_encode(word: str) -> str:$/;"	f
encoded	duplicate_order.py	/^    encoded = duplicate_encode(word=args.w)$/;"	v
factorize	calc_sum.py	/^def factorize(lol, facts):$/;"	f
facts	calc_sum.py	/^  facts = {7: 1, 5113051: 1}$/;"	v
fib	fib_generator.py	/^def fib(n: int) -> T.Coroutine:$/;"	f
fig	plotly_test.py	/^fig = px.line(visits, x="site_id", y="figure", title='Life expectancy in Canada')$/;"	v
find_country	find_country/geo.py	/^def find_country(latitude, longitude):$/;"	f
find_plz	find_country/plz.py	/^def find_plz(latitude, longitude):$/;"	f
h	iterator.py	/^    h = HolyIter()$/;"	v
how	plotly_test.py	/^    how="inner",$/;"	v
http	http_client.py	/^import http.client$/;"	i
indent	extract_values.py	/^indent = "  "$/;"	v
indent	pp.py	/^def indent(indent: int) -> str:$/;"	f
inet_ntoa	ip_unpacking.py	/^def inet_ntoa(packed):$/;"	f
ip	ip_unpacking.py	/^  ip = inet_ntoa(bytes(21549592082154959208))$/;"	v
is_prime	primes_in_numbers.py	/^def is_prime(n):$/;"	f
iterables	extract_values.py	/^iterables = dict, list, tuple, map$/;"	v
iterables	pp_tree.py	/^iterables = dict, list, tuple$/;"	v
json	pp_tree.py	/^import json$/;"	i
json	test.py	/^import json$/;"	i
kpi_df	plotly_test.py	/^kpi_df = pd.read_sql_table("site_kpi", ENGINE)$/;"	v
left_on	plotly_test.py	/^    left_on="id",$/;"	v
loc	find_country/city.py	/^loc = locator.geocode("Munich")$/;"	v
localhost_client	http_client.py	/^def localhost_client(port="1313"):$/;"	f
locator	find_country/city.py	/^locator = Nominatim(user_agent="getcity")$/;"	v
lol	calc_sum.py	/^  lol = []$/;"	v
main	extract_values.py	/^def main(iterable):$/;"	f
main	test.py	/^def main(obj):$/;"	f
main	today.py	/^def main():$/;"	f
math	get_divisors.py	/^import math$/;"	i
matplotlib	plotly_test.py	/^import matplotlib$/;"	i
matplotlib	plotly_test.py	/^import matplotlib.pyplot as plt$/;"	i
misin	test.py	/^def misin():$/;"	f
n	iterator.py	/^    n = 0$/;"	v
nl	extract_values.py	/^nl = "\\n"$/;"	v
np	plotly_test.py	/^import numpy as np$/;"	i
obj	pp_tree.py	/^  obj = [('abc','def'),1313,1313,'abc','def', {'1':{'1':{'1':{'1':'1'}}}, 1:(1,2,4,5)}]$/;"	v
os	today.py	/^import os$/;"	i
parser	duplicate_order.py	/^    parser = argparse.ArgumentParser("duplicate_encode")$/;"	v
parser	http_client.py	/^    parser = ap.ArgumentParser("HTTP-Client with http.client")$/;"	v
pd	plotly_test.py	/^import pandas as pd$/;"	i
plotly	plotly_test.py	/^import plotly.express as px$/;"	i
plotly	plotly_test.py	/^import plotly.offline as pyo$/;"	i
plt	plotly_test.py	/^import matplotlib.pyplot as plt$/;"	i
port	http_client.py	/^    port = args.port$/;"	v
prettier	pp_tree.py	/^def prettier(obj, indent, nl="\\n", trailing=","):$/;"	f
prettify	primes_in_numbers.py	/^def prettify(facts: dict) -> str:$/;"	f
pretty	pp.py	/^def pretty(strc: any) -> str:$/;"	f
primeFactors	primes_in_numbers.py	/^def primeFactors(n):$/;"	f
pruneList	array_dfiff.py	/^def pruneList(l1,l2):$/;"	f
px	plotly_test.py	/^import plotly.express as px$/;"	i
pyo	plotly_test.py	/^import plotly.offline as pyo$/;"	i
raw_df	plotly_test.py	/^raw_df = pd.read_sql_table("kpi_raw", ENGINE)$/;"	v
re	str_pair.py	/^import re$/;"	i
rec	sum_of_digits.py	/^def rec(n):$/;"	f
right_on	plotly_test.py	/^    right_on="kpi_id",$/;"	v
scipy	plotly_test.py	/^import scipy$/;"	i
sites_df	plotly_test.py	/^sites_df = pd.read_sql_table("site", ENGINE)$/;"	v
spamreader	find_country/plz.py	/^    spamreader = csv.reader(csvfile, delimiter=' ', quotechar='|')$/;"	v
string	ip_unpacking.py	/^import string, struct$/;"	i
string_template	pp.py	/^string_template = ""$/;"	v
struct	ip_unpacking.py	/^import string, struct$/;"	i
trailing	extract_values.py	/^trailing = ","$/;"	v
trailing	pp.py	/^trailing = ","$/;"	v
uneven	str_pair.py	/^    uneven = ["NORTH", "SOUTH", "SOUTH", "EAST", "WEST", "NORTH", "WEST"]$/;"	v
